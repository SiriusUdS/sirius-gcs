#include "TemperatureSensor.h"

#include "Logging.h"
#include "PlotConfig.h"

/**
 * @struct RT_Point
 * @brief Describes a point in the RT table
 */
typedef struct {
    float temperature; ///< Temperature in degrees celsius
    float resistance;  ///< Resistance in ohms
} RT_Point;

float TemperatureSensor::adcToTemperature(float adcValue) {
    static constexpr float MIN_VALID_ADC = 10;
    static constexpr float MAX_VALID_ADC = 4090;
    static constexpr float CONTROL_RESISTANCE = 10'000;
    static constexpr float ADDITIVE_FACTOR = 4096;
    static constexpr RT_Point RT_TABLE[] = {
      {-30, 1733200}, {-29, 1630408}, {-28, 1534477}, {-27, 1444903}, {-26, 1361220}, {-25, 1283000}, {-24, 1209327}, {-23, 1140424}, {-22, 1075949},
      {-21, 1015588}, {-20, 959050},  {-19, 906011},  {-18, 856288},  {-17, 809651},  {-16, 765886},  {-15, 724800},  {-14, 685651},  {-13, 648893},
      {-12, 614365},  {-11, 581917},  {-10, 551410},  {-9, 522691},   {-8, 495667},   {-7, 470229},   {-6, 446271},   {-5, 423700},   {-4, 402056},
      {-3, 381666},   {-2, 362449},   {-1, 344330},   {0, 327240},    {1, 311040},    {2, 295751},    {3, 281316},    {4, 267682},    {5, 254800},
      {6, 242583},    {7, 231032},    {8, 220108},    {9, 209772},    {10, 199990},   {11, 190558},   {12, 181632},   {13, 173182},   {14, 165180},
      {15, 157600},   {16, 150425},   {17, 143623},   {18, 137173},   {19, 131053},   {20, 125245},   {21, 119658},   {22, 114356},   {23, 109322},
      {24, 104542},   {25, 100000},   {26, 95819},    {27, 91839},    {28, 88049},    {29, 84440},    {30, 81000},    {31, 77624},    {32, 74409},
      {33, 71347},    {34, 68430},    {35, 65650},    {36, 62984},    {37, 60442},    {38, 58018},    {39, 55706},    {40, 53500},    {41, 51371},
      {42, 49339},    {43, 47399},    {44, 45548},    {45, 43780},    {46, 42056},    {47, 40409},    {48, 38837},    {49, 37335},    {50, 35899},
      {51, 34616},    {52, 33386},    {53, 32206},    {54, 31075},    {55, 29990},    {56, 28905},    {57, 27866},    {58, 26870},    {59, 25915},
      {60, 25000},    {61, 24110},    {62, 23257},    {63, 22438},    {64, 21653},    {65, 20900},    {66, 20174},    {67, 19477},    {68, 18808},
      {69, 18167},    {70, 17550},    {71, 16946},    {72, 16366},    {73, 15808},    {74, 15274},    {75, 14760},    {76, 14281},    {77, 13820},
      {78, 13377},    {79, 12951},    {80, 12540},    {81, 12135},    {82, 11745},    {83, 11369},    {84, 11008},    {85, 10660},    {86, 10324},
      {87, 10001},    {88, 9689},     {89, 9389},     {90, 9100},     {91, 8817},     {92, 8544},     {93, 8282},     {94, 8028},     {95, 7784},
      {96, 7553},     {97, 7332},     {98, 7117},     {99, 6910},     {100, 6710},    {101, 6526},    {102, 6349},    {103, 6177},    {104, 6011},
      {105, 5850},    {106, 5683},    {107, 5522},    {108, 5366},    {109, 5215},    {110, 5070},    {111, 4929},    {112, 4793},    {113, 4661},
      {114, 4533},    {115, 4410},    {116, 4290},    {117, 4175},    {118, 4063},    {119, 3955},    {120, 3850},    {121, 3741},    {122, 3635},
      {123, 3534},    {124, 3435},    {125, 3340},    {126, 3255},    {127, 3173},    {128, 3093},    {129, 3015},    {130, 2940},    {131, 2863},
      {132, 2789},    {133, 2717},    {134, 2648},    {135, 2580},    {136, 2514},    {137, 2451},    {138, 2389},    {139, 2329},    {140, 2270},
      {141, 2213},    {142, 2157},    {143, 2103},    {144, 2051},    {145, 2000},    {146, 1951},    {147, 1904},    {148, 1858},    {149, 1813},
      {150, 1770},    {151, 1731},    {152, 1694},    {153, 1659},    {154, 1623},    {155, 1589},    {156, 1552},    {157, 1516},    {158, 1481},
      {159, 1447},    {160, 1414},    {161, 1383},    {162, 1349},    {163, 1318},    {164, 1288},    {165, 1259},    {166, 1230},    {167, 1201},
      {168, 1174},    {169, 1147},    {170, 1122},    {171, 1096},    {172, 1070},    {173, 1044},    {174, 1020},    {175, 997},     {176, 976},
      {177, 955},     {178, 935},     {179, 915},     {180, 896},     {181, 875},     {182, 855},     {183, 835},     {184, 816},     {185, 797},
      {186, 781},     {187, 765},     {188, 749},     {189, 734},     {190, 719},     {191, 703},     {192, 687},     {193, 672},     {194, 657},
      {195, 643},     {196, 630},     {197, 618},     {198, 605},     {199, 593},     {200, 582},     {201, 571},     {202, 561},     {203, 552},
      {204, 542},     {205, 533},     {206, 523},     {207, 512},     {208, 502},     {209, 492},     {210, 483},     {211, 473},     {212, 464},
      {213, 455},     {214, 446},     {215, 437},     {216, 428},     {217, 420},     {218, 412},     {219, 404},     {220, 396},     {221, 388},
      {222, 381},     {223, 374},     {224, 367},     {225, 360},     {226, 353},     {227, 347},     {228, 340},     {229, 334},     {230, 328},
      {231, 322},     {232, 316},     {233, 310},     {234, 305},     {235, 299},     {236, 294},     {237, 288},     {238, 283},     {239, 278},
      {240, 273},     {241, 269},     {242, 264},     {243, 259},     {244, 255},     {245, 251},     {246, 246},     {247, 242},     {248, 238},
      {249, 234},     {250, 230},     {251, 226},     {252, 222},     {253, 218},     {254, 215},     {255, 211},     {256, 207},     {257, 204},
      {258, 201},     {259, 197},     {260, 194},     {261, 191},     {262, 188},     {263, 185},     {264, 182},     {265, 179},     {266, 176},
      {267, 173},     {268, 171},     {269, 168},     {270, 166},     {271, 163},     {272, 160},     {273, 158},     {274, 155},     {275, 153},
      {276, 151},     {277, 148},     {278, 146},     {279, 143},     {280, 141},     {281, 139},     {282, 137},     {283, 135},     {284, 133},
      {285, 131},     {286, 129},     {287, 127},     {288, 125},     {289, 123},     {290, 122},     {291, 120},     {292, 118},     {293, 116},
      {294, 115},     {295, 113},     {296, 112},     {297, 110},     {298, 108},     {299, 107},     {300, 106},     {301, 104},     {302, 103},
      {303, 101},     {304, 100},     {305, 98},      {306, 97},      {307, 95},      {308, 94},      {309, 92},      {310, 91},      {311, 90},
      {312, 88},      {313, 87},      {314, 86},      {315, 85},      {316, 83},      {317, 82},      {318, 81},      {319, 80},      {320, 79},
      {321, 77},      {322, 76},      {323, 75},      {324, 74},      {325, 73},      {326, 72},      {327, 71},      {328, 70},      {329, 69},
      {330, 68},      {331, 67},      {332, 66},      {333, 65},      {334, 64},      {335, 63},      {336, 62},      {337, 61},      {338, 60},
      {339, 59},      {340, 58},      {341, 57},      {342, 56},      {343, 56},      {344, 55},      {345, 54},      {346, 53},      {347, 52},
      {348, 51},      {349, 51},      {350, 50},      {351, 49},      {352, 48},      {353, 48},      {354, 47},      {355, 46},      {356, 45},
      {357, 45},      {358, 44},      {359, 43},      {360, 43},      {361, 42},      {362, 41},      {363, 41},      {364, 40},      {365, 40},
      {366, 39},      {367, 38},      {368, 38},      {369, 37},      {370, 37},      {371, 36},      {372, 36},      {373, 35},      {374, 35},
      {375, 34},      {376, 34},      {377, 33},      {378, 33},      {379, 32},      {380, 32},      {381, 31},      {382, 31},      {383, 30},
      {384, 30},      {385, 29},      {386, 29},      {387, 28},      {388, 28},      {389, 27},      {390, 27},      {391, 26},      {392, 26},
      {393, 26},      {394, 25},      {395, 25},      {396, 24},      {397, 24},      {398, 24},      {399, 23},      {400, 23}};

    static constexpr int RT_TABLE_SIZE = sizeof(RT_TABLE) / sizeof(RT_TABLE[0]);

    // TODO: UNCOMMENT LATER
    // if (adcValue < MIN_VALID_ADC || adcValue > MAX_VALID_ADC) {
    //    GCS_LOG_DEBUG("TemperatureSensor: Invalid ADC value.");
    //    return PlotConfig::INVALID_VALUE;
    //}

    const float voltage = (adcValue / ADDITIVE_FACTOR) * 3.3f;
    const float resistance = (3.3f / voltage) * CONTROL_RESISTANCE;

    for (int i = 0; i < RT_TABLE_SIZE - 1; i++) {
        if (resistance <= RT_TABLE[i].resistance && resistance >= RT_TABLE[i + 1].resistance) {
            const float slope = (RT_TABLE[i + 1].temperature - RT_TABLE[i].temperature) / (RT_TABLE[i + 1].resistance - RT_TABLE[i].resistance);
            const float temp = RT_TABLE[i].temperature + slope * (resistance - RT_TABLE[i].resistance);
            return temp;
        }
    }

    // GCS_LOG_DEBUG("TemperatureSensor: Measured resistance not in RT table range.");
    // GCS_LOG_INFO("TemperatureSensor: Measured resistance not in RT table range.");
    // GCS_LOG_WARN("TemperatureSensor: Measured resistance not in RT table range.");
    // GCS_LOG_ERROR("TemperatureSensor: Measured resistance not in RT table range.");
    return PlotConfig::INVALID_VALUE;
}
